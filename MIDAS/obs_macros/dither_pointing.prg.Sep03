!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! .COPYRIGHT	(C) MPIA
! .IDENT	dither_pointing.prg
!
! .CALL		@@ dither_pointing icatalog itime=[tot_pointing,tot_single,single]
!				   object start_pos pointing offsets
! .PARAMETERS	P1=icatatlog = name of image catalog for images
!		P2=itime=intergration time in seconds:
!			tot_pointing,tot_single,single
!			tot_pointing = total integration time for pointing
!			tot_single = total integration time for one image
!			single = integration time of a single readout
!		P3:object = object name for identifier
!		P4:start_pos = continue dither pattern at this position
!			       (telescop has to be in position n-1)
!		P5:pointing = pointing number to be stored in descriptor POINT_NO
!		P6:offsets = flag for integer or non-integer pixels offsets
!			     0 = integer pixel offsets ; 1 = non-integer offsets
!
! .PURPOSE	A procedure to take dithered images for one pointing 
!		with OMEGA2000
! .ENVIRONMENT	MIDAS
! .AUTHOR	Rene Fassbender     
! .KEYWORDS	dithering, pointing
! .COMMENTS	An image catalog is opened, which will contain all images taken.
!		The procedure will use the image names, filter etc specified in the
!		GUI. At the current observing position, a dithered image pattern
!		for the specified total integration time will be taken. A single
!		dither pattern contains 20 observing positions, after that the
!		pattern will be repeated with a slight offset for the first image.
!		The area with no overlap is maximally 25 arcsec on each side.
!
! .CONVENTIONS	!! --> command of line necessary
!		!* --> command not needed but could be useful for testing
!
! .VERSION	1.0	16.12.02
!		2.0 	16.01.03	adjusted to CA environment on o2k
!		3.0 	17.01.03	implementation of more features P3, P4
!		4.0	12.03.03	implementation of: abort check, telescope
!					return check, write next file in icat,
!					write pointing keywords, integer pixel 
!					offsets, writing icat in file
!		4.1	16.03.03	use awk for return check
!		4.2	10.04.03	write catalog name in seperate file,
!					changed integer repetition offsets,
!					added key file_path, change awk to 1.line
!++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


!!!!!!!!!!!!!!!!!! SETUP AND HELP !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	! command line parameter setup
crossref icatalog itime object start_pos pointing offsets


	! help text
if p1(1:4) .eq. "help" then

write/out
write/out "dither_pointing.prg"
write/out "call: @@ dither_pointing icatalog itime=[tot_pointing,tot_single,single]"
write/out "			     start_pos pointing	"
write/out
write/out "This program takes dithered images for one pointing for OMEGA2000:"
write/out "The area with no overlap is maximally 25 arcsec on each side"
write/out 
write/out "The command line parameters are:"
write/out "P1:icatatlog = name of image catalog for images"
write/out "P2:itime = [tot_p,tot_s,s]intergration time in seconds:"
write/out "	tot_pointing,tot_single,single"
write/out "	tot_pointing = total integration time for pointing"
write/out "	tot_single = total integration time for one image"
write/out "	single = integration time of a single readout"
write/out "P3:object = object name for identifier"
write/out "P4:start_pos = continue dither pattern at this position"
write/out "               (telescop has to be in position n-1)"
write/out "P5:pointing = pointing number to be stored in descriptor POINT_NO"
write/out "P6:offsets = flag for integer or non-integer pixels offsets"
write/out "	        0 = integer pixel offsets ; 1 = non-integer offsets"
write/out

return		! back to MIDAS session

endif	


	! define command line parameters
define/parameter P1 ? C "Enter a name for the image catalog:"
define/parameter P2 ? N "Enter the integration times in secs[tot,integ,single]:"
define/parameter P3 ? C "Enter an object name:"
define/parameter P4 1 N	"Enter the start position:"
define/parameter P5 1 N "Enter the identification number of the current pointing:"
define/parameter P6 0 N "Enter the offset flag"



	! define keyword which contains the path where pipe_files are stored
define/local file_path/c/1/80 "/disk-a/o2k/tmp"


	! extract catalog name
define/local icatalog/c/1/80 {P1}

	! extract integration times
define/local itime/r/1/3 {P2}
define/local tot_pointing/r/1/1 {itime(1)}
define/local tot_single/r/1/1 {itime(2)}
define/local single_time/r/1/1 {itime(3)}
	
	! for return value of abort-file-check
define/local abort_check/i/1/1		

	! define keyword for path and image name
define/local pathname_ima/c/1/200

	! get pointing number
define/local point_no/i/1/1 {P5}

	! get start position
define/local start_position/i/1/1 {P4}
	

set/format I1 F4.2

	! display input parameters
write/out
write/out "A dither pattern will now be used to take images..."	
write/out "All images will be listed in the image catalog: {icatalog}"
write/out "The total integration time for the poining will be:{tot_pointing} secs"
write/out "The total integration time for a single image is: {tot_single} secs"
write/out "The integration time for a single frame is: {single_time} secs" 
write/out "The dither pattern will be started at position: {start_position}"
write/out "The identifier will contain the object name: {P3}"
write/out "The dither pattern will be started at position: {start_position}"
write/out "The descriptor POINT_NO will contain the pointing number:{point_no}"
write/out "The dither offsets will be (0=integer pixels ; 1=non-integer):{P6}"
write/out

set/format


	! remove existing abort file
	! abort check: 0=does not exist ; 1=abort file exists
abort_check = m$exist("/disk-a/o2k/tmp/geirsLstAbort")
if abort_check .eq. 1 then
  $rm /disk-a/o2k/tmp/geirsLstAbort 
endif



!!!!!!!!!!!!!!!!! PASS INFORMATION TO PIPELINE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	! activate image catalog: all new *.fits images will be added 
create/icat {icatalog} null	! no entries in catalog
set/icat {icatalog}
	

define/local icat_path/c/1/180			! holds path and name of icat
define/local string_length/i/1/1		! length of path
define/local file_id_1/i/1/2			! file id for open/file
define/local file_id_2/i/1/2			! file id for open/file
define/local file_id_3/i/1/2			! file id for open/file


$pwd | write/keyword icat_path

string_length = m$len(icat_path)
string_length = string_length+1			! start at this position

icat_path({string_length}:) = "/{icatalog}"

	! file contains path and name of active image catalog
open/file {file_path}/MacroLstIcat write file_id_1
write/file {file_id_1(1)},key icat_path
close/file {file_id_1(1)}

set/format f4.1

	! file which contains the integration time per image
open/file {file_path}/MacroIntTime write file_id_2
write/file {file_id_2(1)} {tot_single}
close/file {file_id_2(1)}


	! file contains only name of active image catalog
open/file {file_path}/MacroLstIcatName write file_id_3
write/file {file_id_3(1)},key icatalog
close/file {file_id_3(1)}






!!!!!!!!!!!!!!!!! DITHER SEQUENCE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	
	! define dither offsets in units of 1/10 arcsecs
	! all positions are defined relative to last position
set/format I1

	! for non-integer pixel offsets
if {P6} .eq. 1 then

  define/local x_offset/i/1/20 0,100,-150,180,-230,-50,200,130,-380,230
  write/keyword x_offset/i/11/20 -210,150,-90,320,-50,-220,140,-240,40,260

  define/local y_offset/i/1/20 0,100,50,-220,-30,150,-200,180,-80,250,
  write/keyword y_offset/i/11/20 -70,-310,160,-100,290,-100,-50,-190,370,-400
  
  define/local X_back/I/1/1 -130
  define/local Y_back/i/1/1 200
	
	
	! define repetion offsets
  define/local x_repetition/i/1/20 0,-20,0,20,0,-30,0,30,0,-20,
  write/keyword x_repetition/i/11/20 -30,-40,-30,-20,0,20,30,40,30,20

  define/local y_repetition/i/1/20 20,0,-20,0,30,0,-30,0,40,30
  write/keyword y_repetition/i/11/20 20,0,-20,-30,-40,-30,-20,0,20,30

!..............................................................................

else	! integer pixel offsets	: multiples of 9 = 2pixels

  define/local x_offset/i/1/20 0,99,-153,180,-225,-45,198,126,-378,225
  write/keyword x_offset/i/11/20 -207,153,-90,315,-45,-216,144,-234,36,252

  define/local y_offset/i/1/20 0,99,54,-216,-27,153,-198,180,-90,252
  write/keyword y_offset/i/11/20 -72,-306,162,-99,288,-99,-54,-189,360,-396

  define/local X_back/I/1/1 -135
  define/local Y_back/i/1/1 198
	
	
	! define repetion offsets--> modified to yield sum=0
  define/local x_repetition/i/1/20 0,-18,0,18,0,-27,0,27,0,-18,
  write/keyword x_repetition/i/11/20 -27,-36,-27,-18,0,18,27,36,27,18

  define/local y_repetition/i/1/20 18,0,-18,0,27,0,-27,0,36,27
  write/keyword y_repetition/i/11/20 18,0,-18,-27,-36,-27,-18,0,18,27

  write/out "Integer pixel offsets were defined..."

endif


	! calculate repitions
define/local rep_image/i/1/1		! total number of images to be taken
rep_image = tot_pointing/tot_single

define/local rep_integrate/i/1/1	!number of images for single-image-integra
rep_integrate = tot_single/single_time




!!!!!!!!!!!!!!!!! TELESCOPE MACRO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

	! keywords
define/local loop/i/1/1 
define/local counter/i/1/1 1		! for counting to 20
define/local pattern_reps/i/1/1 2	! for counting how many times 20
define/local tel_return/i/1/1 0		! character keyword for telescop returns:0,-1


 	! find the proper start position
if start_position .le. 20 then
	counter = start_position
else
	pattern_reps = start_position/20
	counter = start_position - (20*pattern_reps)
	pattern_reps = pattern_reps+2			! pattern for next 20 block
endif

if counter .eq. 0 then
	counter = 20
	pattern_reps = pattern_reps-1	! set to next block
endif

if pattern_reps .gt. 20 then
  pattern_reps = 2		! start at beginning if start_pos>400
  write/out "Start position too high. Dither pattern will be started at beginning..."
endif


!*return		! test without hardware commands




!.............. telescope and camera commands now ............

	! write initial image descriptors
$cmd_o2000_new counter DITH_NO set {start_position}	! set dither counter to start position
$cmd_o2000_new counter POINT_NO set {point_no}	! set pointing no to its value
$cmd_o2000_new counter EXPO_NO clear		! clear exposure counter-->EXPO_NO=1


	! set telescope in XY-mode
$ $TECS_SCRIPT/t_coord_system xy


	! set single image parameters
set/format I1
$cmd_o2000_new crep {rep_integrate}
$cmd_o2000_new itime {single_time}
$cmd_o2000_new sync



!-------------------------------------------------------------
	! do loop over number of images
do loop = 1 {rep_image} 1

set/format I1
write/out "Taking image {loop} of {rep_image}..."	

	! write object
$cmd_o2000_new object {P3}:{loop}/{rep_image}


set/format I5 	! for telescope command

	! offset telescope
$ $TECS_SCRIPT/t_offset {x_offset({counter})} {y_offset({counter})} -
| awk '{if(NR==1){print $1}}' | write/keyword tel_return	! pipe return

if tel_return .ne. 0 then
  write/out "ERROR: Telescope return value for t_offset signals an error..."
  write/out "...the program is aborted"
  return
endif	


!wait/secs 2	! wait for telescope  before read

$cmd_o2000_new read
$cmd_o2000_new sync


	! abort check: 0=does not exist ; 1=abort file exists
abort_check = m$exist("/disk-a/o2k/tmp/geirsLstAbort")
if abort_check .eq. 1 then
  write/out "Program is aborted..."
  $rm /disk-a/o2k/tmp/geirsLstAbort
  return
endif


	! add file to image catalog
if loop .ge. 2 then
  set/midas output=logonly
  $cmd_o2000_new last	! writes last filename in file geirsLstFile
	! writes last filename in keyword pathname_ima
  write/keyword pathname_ima </disk-a/o2k/tmp/geirsLstFile 
	! add file to icat
  add/icat {icatalog} {pathname_ima}
  set/midas output=yes
endif


$cmd_o2000_new save -i


	! handle image descriptors
$cmd_o2000_new counter DITH_NO incr			! increment dither counter by 1
$cmd_o2000_new counter EXPO_NO clear		! reset exposure counter 


	! check wether 20 images were taken
if counter .eq. 20 then

	set/format I5
		! set telescope back to first position of last dither pattern
		! calculated for integer pixel offsets
	$ $TECS_SCRIPT/t_offset {X_back} {Y_back} -
	 | awk '{if(NR==1){print $1}}' | write/keyword tel_return

	if tel_return .ne. 0 then
  	  write/out "ERROR: Telescope return value for t_offset signals an error..."
  	  write/out "...the program is aborted"
  	  return
	endif	
	
		! set telescope to next starting position
	$ $TECS_SCRIPT/t_offset {x_repetition({pattern_reps})} {y_repetition({pattern_reps})} -
	| awk '{if(NR==1){print $1}}' | write/keyword tel_return

	if tel_return .ne. 0 then
  	  write/out "ERROR: Telescope return value for t_offset signals an error..."
  	  write/out "...the program is aborted"
  	  return
	endif		


		! after 400 images, start with first one
	if pattern_reps .eq. 20 then
	  pattern_reps = 0
	endif


	pattern_reps = pattern_reps+1
	counter = 0

endif


	! increment counter
counter = counter+1


enddo
!-------------------------------------------------------------

$cmd_o2000_new sync    ! wait for last save

set/midas output=logonly

	! add last file to image catalog
$cmd_o2000_new last	! writes last filename in file geirsLstFile
	! writes last filename in keyword pathname_ima
write/keyword pathname_ima </disk-a/o2k/tmp/geirsLstFile 
	! add file to icat
add/icat {icatalog} {pathname_ima}

set/midas output=yes



!!!!!!!!!!!!!!!!! CLOSE DOWN THINGS !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

write/out
write/out "All images for pointing are now finished..." 
write/out


	! deactivate image catalog
clear/icat

	! give out catalog
write/out
write/out "The following images were taken and are listed in the image catalog {icatalog}:"
write/out

read/icat {icatalog}

write/out
write/out "Observing of current pointing done..."
