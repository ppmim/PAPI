!	s k y f l a t s . p r g		28-Jun-04	HJR
!
!  Series of flatfield exposures on the sky

crossref ident level coadds number offsets check saturation

define/par P1 ? ? "Identifier: "
define/par P2 15000 N/A "Maximum exposure level per frame [counts] : "
define/par P3 2 N/A "Number of co-adds : "
define/par P4 5 N/A "Number of images : "
define/par P5 0,30 N/A "Offsets in RA,DEC [arcsec] : "
define/par P6 check C/A "Level check after each exposure [check/no_check] : "
define/par P7 20000 N/A "Saturation level : "

P1 = m$lower(P1)
if p1(1:4) .eq. "help" then
   write/out
   write/out "skyflats.prg"
   write/out "call: o2k/skyflats [ident] [max_counts] [n_exp] [n_coadd]" 
   write/out "	      [read-mode] [dRA,dDEC]  [saturation]"
   write/out 
   write/out "The command line parameters are:"
   write/out "  P1 = identifier (use quotes if blanks are included)"
   write/out "  P2 = maximum exposure level in single exposure"
   write/out "  P3 = number of frames to be added up in memory before image is stored"
   write/out "  P4 = number of images to be stored"
   write/out "  P5 = telescope offsets [arcsec] in RA,DEC between stored frames"
   write/out "  P6 = check exposure level after each image [check/no_check]"
   write/out "  P7 = saturation level"
   write/out "To abort a running sequence press ABORT in the GEIRS gui! Never use ^C"
   write/out
endif

define/local abort_check/i/1/1 0	! for return value of abort-file-check
	! remove existing abort file
	! abort check: 0=does not exist ; 1=abort file exists
abort_check = m$exist("/disk-a/o2k/tmp/geirsLstAbort")
if abort_check .eq. 1 then
  $rm /disk-a/o2k/tmp/geirsLstAbort 
endif

P6 = m$lower(P6)

define/local i/i/1/1 0
define/local n_exp/i/1/1 {P4}
define/local max_lev/r/1/1 {P2}
define/local curr_lev/r/1/2 0,0
define/local act_lev/r/1/1 0
define/local sat_lev/r/1/1 {P7}
define/local exp_time/r/1/1 0
define/local act_time/r/1/1 0
define/local test_time/r/1/1 0
define/local offset/r/1/2 {P5}
define/local coadds/i/1/1 {P3}
define/local answer/c/1/8 " "

! setup camera

$cmd_o2000 crep 1

$cmd_o2000 object test {P1}
$cmd_o2000 sync

! take test exposure

$cmd_o2000 itime 0
testexp:
		! abort check: 0=does not exist ; 1=abort file exists
	abort_check = m$exist("/disk-a/o2k/tmp/geirsLstAbort")
	if abort_check .eq. 1 then
  	  write/out "Program is aborted..."
	  $auplay /disk-a/staff/GEIRS/SOUNDS/crash.au
	  $rm /disk-a/o2k/tmp/geirsLstAbort 	! remove file again
  	  goto exit
	endif
$cmd_o2000 read
$cmd_o2000 sync
$cmd_o2000 itime -stdout | write/key act_time/r/1/1
$cmd_o2000 median -stdout -raw | write/key curr_lev/r/1/2
act_lev = curr_lev(2)-curr_lev(1)

if curr_lev(2) .ge. sat_lev then
   if curr_lev(2) .le. 40000 then
      write/out "         sky too bright but continueing to monitor brightness ..."
      goto testexp			! continue monitoring
   else
      write/out
      write/out "         Sky too bright. Detector saturated !"
      write/out
      $auplay /disk-a/staff/GEIRS/SOUNDS/sorrydave.au
      goto exit
   endif
else
   set/format F5.0
   write/out "         Minimum exposure time gives level of {act_lev} counts/pixel."
   exp_time = max_lev/act_lev*act_time
   set/format F5.1
   write/out "         Sequence requires {exp_time}sec frame integration time."
   if exp_time .gt. 60 then
	$auplay /disk-a/staff/GEIRS/SOUNDS/doorbell.au
      inquire/key answer "Proceed with exposure [y/n] ?"
      answer = m$lower(answer)
      if answer(1:1) .eq. "n"  then
	   write/out "         Abort. No exposure taken!"
         $auplay /disk-a/staff/GEIRS/SOUNDS/crash.au
	   goto exit
	else
	   write/out "         Taking flat now..."
	endif
   endif
endif

! take flatfield exposures
set/format i2 F5.1

do i = 1 {n_exp}
   $cmd_o2000 object {P1}
   $cmd_o2000 itime {exp_time}
   $cmd_o2000 crep {coadds}
   $cmd_o2000 sync
   $cmd_o2000 read
   $cmd_o2000 sync
		! abort check: 0=does not exist ; 1=abort file exists
	abort_check = m$exist("/disk-a/o2k/tmp/geirsLstAbort")
	if abort_check .eq. 1 then
  	  write/out "Program is aborted..."
	  $auplay /disk-a/staff/GEIRS/SOUNDS/crash.au
	  $rm /disk-a/o2k/tmp/geirsLstAbort 	! remove file again
  	  goto exit
	endif
   if coadds .eq. 1 then
      $cmd_o2000 save
   else
      $cmd_o2000 save -i
   endif

   if i .lt. n_exp then
      $cmd_o2000 tele relative {offset(1)} {offset(2)}
      $cmd_o2000 sync tele
      if P6(1:2) .ne. "no" then
         $cmd_o2000 object test {P1}
         $cmd_o2000 itime 0
         $cmd_o2000 crep 1
         $cmd_o2000 sync
         $cmd_o2000 read
         $cmd_o2000 sync
         $cmd_o2000 itime -stdout | write/key act_time/r/1/1
         $cmd_o2000 median -stdout -raw | write/key curr_lev/r/1/2
         act_lev = curr_lev(2)-curr_lev(1)
         exp_time = max_lev/act_lev*act_time
         write/out "         Exposure time adjusted to {exp_time}sec for frame {i}+1."
         if exp_time .gt. 60 then
            $auplay /disk-a/staff/GEIRS/SOUNDS/doorbell.au
            inquire/key answer "Proceed with exposure [y/n] ?"
            answer = m$lower(answer)
            if answer(1:1) .eq. "n"  then
	         write/out "         Abort. No exposure taken!"
               $auplay /disk-a/staff/GEIRS/SOUNDS/crash.au
	         goto exit
	      else
	         write/out "         Taking flat now..."
	      endif
         endif
      endif
   endif
enddo

write/out  "         All done ..."
$auplay /disk-a/staff/GEIRS/SOUNDS/gong.au

exit:
return
