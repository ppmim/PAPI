#!/usr/bin/env python

################################################################################
#
# symple test programm for PyRAF
#
# symple.py
#
# Last update 14/01/2008
#
################################################################################

#"""
#   Test routines for data reduction with PyRAF.
#"""

################################################################################

# Import necessary modules


import os
import sys
import time

from Tkinter import *
from pyraf import iraf
from iraf import noao
from iraf import imred
from iraf import ccdred

dark_framelist=['A0408060036.fits', 'A0408060037.fits', 'A0408160001.fits','A0408160002.fits','A0408160003.fits','A0408160004.fits','A0408160005.fits',
                'A0408160006.fits','A0408160007.fits','A0408160008.fits','A0408160009.fits','A0408160010.fits','A0408160011.fits','A0408160012.fits',
                'A0408160013.fits','A0408160014.fits','A0408160015.fits','A0408160016.fits','A0408160017.fits','A0408160018.fits','A0408160019.fits',
                'A0408160020.fits']

flatK_begin_framelist=['A0408160021.fits','A0408160022.fits','A0408160023.fits','A0408160024.fits','A0408160025.fits','A0408160026.fits']

science_framelist=['A0408160047.fits','A0408160048.fits','A0408160049.fits','A0408160050.fits','A0408160051.fits','A0408160052.fits','A0408160053.fits',
                   'A0408160054.fits','A0408160055.fits','A0408160056.fits','A0408160057.fits','A0408160058.fits','A0408160059.fits','A0408160060.fits']

data_dir='/disk-a/caha/panic/DATA/test1'


dark_framelist_b=['/disk-a/caha/panic/TMP/data/A0408060036.fits', '/disk-a/caha/panic/TMP/data/A0408060037.fits']
flat_framelist=['/disk-a/caha/panic/TMP/data/A0408060036.fits', '/disk-a/caha/panic/TMP/data/A0408060037.fits']
sky_framelist=['/disk-a/caha/panic/TMP/data/A0408060036.fits', '/disk-a/caha/panic/TMP/data/A0408060037.fits']
sky_frame='/disk-a/caha/panic/TMP/data/A0408060036.fits'
new_pixmask='/disk-a/caha/panic/TMP/data/badpixmask'

################################################################################

def pipe( param ):

    print '****** PIPE initiation ******'
    

    print '->Computing master DARK frame ........' 
    ## Compute DARK of a frame list
    run_darkcombine( dark_framelist, data_dir )

    print '->Computing master FLAT frame (K filter) .......'
    ## Compute FLAT of a frame list 
    run_flatcombine ( flatK_begin_framelist, data_dir )

    return

    ## Compute SKY of a frame list of science frames
    run_compute_sky ( sky_framelist )
    
    subtract_sky ( framelist, 'masterDARK.fits' )
    
    nomalize_flatfield ( sky_frame )

    # Apply flatfield to a framelist
    
    apply_flatfield ( dark_framelist , '/disk-a/caha/panic/TMP/data/A0408060036.fits' )
    
    create_pixmask ( sky_frame , new_pixmask)

    apply_pixmask ( sky_framelist , new_pixmask )

    ## Shift and Align the frame set
    # TODO !!!!

    ## Add all the frames 
    add_reduced_frameset ( sky_framelist,'reduced_frame.fits')
    
    print 'PIPE finished'
    
################################################################################
    
def run_darkcombine(framelist, dir):

    print 'Step 1 of Darkcombine'
    start_time = time.time()
    
    st_frames=''

    for nframe in dark_framelist:
        st_frames+=nframe+ ' , '

    print st_frames
        
    # Change to the source directory
    iraf.chdir(dir)

    print 'Step 2'
    
    # Call the noao.imred.ccdred task through PyRAF
    iraf.darkcombine(input=st_frames,
                     output='masterDARK.fits',
                     ccdtype='none',
                     process='no'
                     #ParList = _getparlistname('darkcombine')
                     )
    print 'Step 3'
    
    # Change back to the original working directory
    iraf.chdir()
    
    print "Time elapsed: ", time.time() - start_time, "s"

    #print 'Step 4'
    #iraf.images()
    #for image in input:
    #    iraf.imstat(image)
    
################################################################################

def run_flatcombine ( framelist , dir ):

    print 'Initiation of Flatcomine'
    start_time = time.time()
    st_frames=''

    for nframe in framelist:
        st_frames+=nframe+' , '

    # Change to the source directory
    iraf.chdir(dir)
    
    print 'Combining images : ' + st_frames
    iraf.flatcombine(input=st_frames,
                     output='masterFLAT_K.fits',
                     ccdtype='none',
                     process='no',
                     #ParList = _getparlistname ('flatcombine')
                     )
    # Change back to the original working directory
    iraf.chdir ()
    print "Time elapsed: ", time.time() - start_time, "s"
    

################################################################################
    
def run_compute_sky ( framelist ):

     print 'Computing sky ... '
     st_frames=''

     for nframe in framelist:
         st_frames+=nframe+' , '

     # Change to the source directory
     iraf.chdir('/disk-a/caha/panic/TMP/data')
    
     print 'Images to be combined : ' + st_frames
     iraf.imcombine(input=st_frames,
                     output='sky_K.fits',
                     #ccdtype='none',
                     #process='no',
                     #ParList = _getparlistname ('flatcombine')
                     )
     # Change back to the original working directory
     iraf.chdir ()
     
################################################################################
# DO NOT WORK !!!
#################
def substrac_sky ( framelist, sky_frame ):

    print 'Subtracting SKY'

    st_frames=''
    st_frames_res=''

    for nframe in framelist:
        st_frames+=nframe+' , '
        st_frames_res+=nframe.replace(".fits","_nsky.fits")+' , '

    print 'Ficheros entrada: ' + st_frames   
    print 'Ficheros salida: ' + st_frames_res 
        
    #Change to the source directory
    iraf.chdir('/disk-a/caha/panic/TMP/data')
    
    print 'Images to be subtracted : ' + st_frames
    iraf.imarith(operand1=st_frames,
                 operand2='/disk-a/caha/panic/TMP/data/sky_K.fits',
                 #operand2=st_frames,
                 op='-',
                 result=st_frames_res
                 )
    
    # Change back to the original working directory
    iraf.chdir ()

    
################################################################################

def nomalize_flatfield ( flat_frame ):

    mean = 0.0
    normalized_flat_frame='masterFlatK_N.fits'
    
    print ' ******  Normalizing Flat-Field *********'

    #Change to the source directory
    iraf.chdir('/disk-a/caha/panic/TMP/data')

    #Compute the mean of the image
    mean=float(iraf.imstat (
        images=flat_frame,
        fields='mean',Stdout=1)[1])

    print 'The mean value of image is: %(mean)f' %vars() 
    
    print 'Images to be subtracted : '

    if os.path.exists('/disk-a/caha/panic/TMP/data/'+normalized_flat_frame):
        print 'A Normalized flatfield already exist: '+'/disk-a/caha/panic/TMP/data/'+normalized_flat_frame+'...it will be removed..'
        os.remove('/disk-a/caha/panic/TMP/data/'+normalized_flat_frame)
        
    iraf.imarith(operand1=flat_frame,
                 operand2=mean,
                 op='/',
                 result=normalized_flat_frame,
                 )
    
    # Change back to the original working directory
    iraf.chdir ()
    
################################################################################

def apply_flatfield ( framelist , flatframe ):

    print ' ******** Applying flat field to images **********'

    st_frames=''
    st_frames_res=''

    # Build the frame list for IRAF 
    for nframe in framelist:
        st_frames+=nframe+' , '
        st_frames_res+=nframe.replace(".fits","_nsky_Flat.fits")+' , '

    print 'Ficheros entrada: ' + st_frames   
    print 'Ficheros salida: ' + st_frames_res
    
    #Change to the source directory
    iraf.chdir('/disk-a/caha/panic/TMP/data')
    
    iraf.imarith(operand1=st_frames,
                 operand2=flatframe,
                 op='/',
                 result=st_frames_res,
                 )
    
    # Change back to the original working directory
    iraf.chdir ()


################################################################################
def create_pixmask ( frame , new_pixmask):

    print ' ******** Creating pixel mask from image **********'
    
    #Change to the source directory
    iraf.chdir('/disk-a/caha/panic/TMP/data')
    
    iraf.ccdmask(image=frame,
                 mask=new_pixmask,
                 )
    
    # Change back to the original working directory
    iraf.chdir ()

################################################################################
def apply_pixmask ( framelist , pixmask ):

    print ' ******** Applying pixel mask from image **********'
    
    #Change to the source directory
    iraf.chdir('/disk-a/caha/panic/TMP/data')

    st_frames=''

    # Build the frame list for IRAF 
    for nframe in framelist:
        st_frames+=nframe+' , '

    print 'Ficheros entrada: ' + st_frames   
    
    iraf.fixpix(images=st_frames,
                 masks=pixmask,
                 )
    
    # Change back to the original working directory
    iraf.chdir ()


################################################################################
def add_reduced_frameset ( framelist, result_frame  ):

    print ' ******** Adding the reduced frameset  **********'
    
    #Change to the source directory
    iraf.chdir('/disk-a/caha/panic/TMP/data')

    st_frames=''

    # Build the frame list for IRAF 
    for nframe in framelist:
        st_frames+=nframe+' , '

    print 'Ficheros entrada: ' + st_frames   

    #iraf.clobber='yes'
    iraf.imcombine(input=st_frames,
                   output=result_frame,
                   combine='median',
                   reject='avsigclip',
                   scale='none',
                   zero='mode',
                   statsec='[500:600,500:600]',
                   )
    
    # Change back to the original working directory
    iraf.chdir ()    
    
################################################################################

if __name__ == "__main__":
    pipe(sys.argv[1:])

################################################################################

