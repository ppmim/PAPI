========================================
PANIC SOFTWARE INSTALLATION INSTRUCTIONS 
========================================

The next are the installation instructions for the PANIC software on the
openSuSE 12.2-64 bit

Updated from openSuSE11.4 64bit (23-Nov-2012).

 
***********
** GEIRS **
***********
Requirements
------------

*) sudo zypper install readline5
*) sudo zypper install gnuplot


*) system setup

root> echo 134217728  > /proc/sys/kernel/shmmax

From Clemens:
"""
I needed to use as root:
- install gnuplot
- set /proc/sys/kernel/shm* to larger sizes
- set kernel.shm* in /etc/sysctl.conf to get correct shm-setting after a reboot:

kernel.shmall = 128000000000
kernel.shmmax = 4000000000
kernel.shmseg = 40960


- install /usr/src/PlxLinux[_v6.50]
"""

* after launch GEIRS (start_panic_new), create next empty file:

    ~/tmp/fitsheader_panic.txt


* Remove  ~/tmp/irmotor_lfpos.panic for simulation mode ???

*) geirs2Panic 

--
Install external packages first:
  - cfitsio from http://heasarc.gsfc.nasa.gov/fitsio/
  - CCfits from http://heasarc.gsfc.nasa.gov/fitsio/CCfits/

cd src

Edit Makefile to have the compiler and linker find the associate
headers and libraries.

Type
    make

Move the executable geirs2Panic according to your PATH
or link it to a directory so your shell will find it.

R. J. Mathar, www.mpia.de/~mathar, 2012-10-23
--

wget ftp://heasarc.gsfc.nasa.gov/software/fitsio/c/cfitsio3310.tar.gz
wget http://heasarc.gsfc.nasa.gov/fitsio/CCfits/CCfits-2.4.tar.gz
wget http://www.mpia-hd.mpg.de/~mathar/progs/geirs2Panic.tar.gz

Note: 
----
On openSuSE12.2 I had to add the lines

#include <unistd.h>

to heade files in order to compile the sources.

 
********
** OT **
********

1-Java Development Kit 7
========================
- As root, you must download and install the next package:

http://download.oracle.com/otn-pub/java/jdk/7u1-b08/jdk-7u1-linux-x64.rpm

You might need to use the alternatives package for installation.



2-NetBeans IDE 7.0.1
====================
- It is not required for the execution of the OT, but for the debuging and development is advised.
- As root or panic user, you must download and install the next package:
http://download.netbeans.org/netbeans/7.0.1/final/bundles/netbeans-7.0.1-ml-javase-linux.sh


3-OT Sources
============

> svn co svn://arch.osn.iaa.es/PANIC/PANICObservationTool OT


**************
** PIPELINE **
**************

0-Some system modules:
======================
zypper install tcl tk  tcl-devel tk-devl python-tk
zypper install python-sphinx
zypper install python-qt4-devel

-- summary of zypper install --
zypper install libreadline5
zypper install tcl tk  tcl-devel tk-devl python-tk
zypper install python-sphinx
zypper install python-qt4-devel
zypper install python-devel
zypper install ipython
zypper install python-numpy python-numpy-devel
zypper install python-scipy
zypper install python-matplotlib python-matplotlib-tk
zypper install python-qt4 
zypper install libXmu6-32bit
--

1-Python v2.7.3 : (default in openSuSE12.2)
===============

1.1 python-devel 

> zypper install python-devel

1.2 IPython 0.12.1 (optional)

> zypper install ipython


1B-Python v2.7.x : (if no default in openSuSE12.x)
=================
Python 2.7 is mandatory because a bug with PyRAF routines (imcombine, imstats, ...)
when executed by the multiprocessing module (Pool.apply_async, map_async, ...)

1.1 wget http://www.python.org/ftp/python/2.7.3/Python-2.7.3.tgz

>tar -xvzf
>mkdir /usr/local/python273
>cd python-src-dir
>./configure --prefix=/usr/local/python273
>make install

1.2 Python Modules
-------------------
- Then, after install the new version of Python interpreter, we must install
again all the python modules, ie:

 * IPython 0.12.1 (optional)
 * numpy > 1.6
 * scipy
 * matplotlib
 * stsci_python
 * VO.table + ATpy
 * PyWCS (included in stsci_python)
 * PyQt4
 
 (see details below)


2-Astromatic
============
Two options:
A) Binary packages
+++++++++++++++++++

2.1 SExtractor v2.8.6: from astromatic get rpm for 64 bit
---------------------------------------------------------
- Download from astromatic.net -->
http://www.astromatic.net/download/sextractor/sextractor-2.8.6-1.x86_64.rpm

> rpm -ivl sextractor-2.8.6-1.x86_64.rpm


2.2 SCAMP v1.7.0 
----------------

- Hard dependende of libplplot9. We have to get libplplot9 rpm build for
  OpenSuSE from :
  ftp://ftp.pbone.net/mirror/ftp5.gwdg.de/pub/opensuse/repositories/home:/makoenig:/science/openSUSE_Factory/x86_64/libplplot9-5.7.1-1.2.x86_64.rpm
  
  * libgfortran is required by libplot9. It must be installed from openSuSE reposotory with zypper install libgfortran43  (libgfortran45 - S11.4)

> rpm -ivl libplplot9-5.7.1-1.2.x86_64.rpm 

- CDSclient package 

> wget http://cdsarc.u-strasbg.fr/ftp/pub/sw/cdsclient.tar.gz
> tar xvfz cdsclient.tar.gz
> cd cdsclient-V.vv
> ./configure
> make
> make install


- Download SCAMP v.1.7.0 from Astromatic.net --->scamp-1.7.0-1.x86_64.rpm

> rpm -ivl scamp-1.7.0-1.x86_64.rpm


PLPLOT para SCAMP (para generar ficheros png's):
================================================

1) Descargar el fuente de gd-libgd (con zypper no consigo encontrar dicha libreria) de https://bitbucket.org/pierrejoye/gd-libgd/overview
    
      >hg clone https://bitbucket.org/pierrejoye/gd-libgd
      
    2) Compilar dicha libraria (libgd):
       
       > cd gd-libgd
       > mkdir build
       > cd build 
       > cmake -DBUILD_TEST=1  -DENABLE_PNG=1 -DCMAKE_LIBRARY_PATH=/usr/loca/gdlib/lib -DCMAKE_INCLUDE_PATH=/usr/local/gdlib/include ../../gd-libgd/
       > make
       > make install

       Si falla la compilación con el error:
       
       """
       Linking C executable copyrotated /usr/bin/ld: CMakeFiles/copyrotated.dir/copyrotated.o: 
       undefined reference to symbol 'sin@@GLIBC_2.2.5' /usr/bin/ld: 
       note: 'sin@@GLIBC_2.2.5' is defined in DSO /lib64/libm.so.6 so try adding it to the linker command line /lib64/libm.so.6: 
       could not read symbols: Invalid operation collect2: ld returned 1 exit status 
       make[2]: * [examples/copyrotated] Error 1 
       make[1]: * [examples/CMakeFiles/copyrotated.dir/all] Error 2 
       make: * [all] Error 2
       """
       
       parchear el fichero  ../examples/CMakeLists.txt tal que:
       
       FOREACH(test_name ${TESTS_FILES}) 
	  add_executable(${test_name} "${test_name}.c") 
	  -	target_link_libraries (${test_name} ${GD_LIB}) 
	  +	target_link_libraries (${test_name} ${GD_LIB} -lm) 
       ENDFOREACH(test_name)
       
       (esta solución la tomé del propio foro del repositorio de la libreria)
       
       
       
    3) Descargar la plplot-5.9.4 (pues parece que es la que recomiendan en el foro de SCAMP  http://www.astromatic.net/forum/showthread.php?tid=761)
       aunque puede que con la 5.9.9 también funcionase.
       
       http://sourceforge.net/projects/plplot/files/plplot/5.0.1/
       
    
    4) Compilar plplot-5.9.9
    
       > cd plplot-5.9.9
       > mkdir build
       > cd build 
       > cmake -DCMAKE_INSTALL_PREFIX=/usr/local/plplot599 -DBUILD_TEST=ON ../../plplot-5.9.9 >&cmake.out
       > ccmake ..
         y editar a mano 
 
          GDI32_LIBRARY /usr/local/lib/libgd.so (en la 599 no es necesario, lo detecta bien)
          ENABLE_python OFF (pues da un problema al no encontrar un .h de numpy ??)
          PLD_png ON
    
        básicamente eso.
        
     > make 
     > make install
     
     IMPORTANTE: copiar /usr/local/lib/libgd.so en /usr/local/plplot599/lib/ pues si no se quejará el PLPLOT de que no la encuentra.
     
     > export PLPLOT_LIB=/usr/local/plplot594
     (esto realmente creo casi seguro que NO es necesario !!!!!)
     
     Lo realmente importante es copiar o enlazar la nueva libreria plplotd que usa SCAMP. En el sistema (openSUSE12.2) 
     hay instalada una por defecto (so.9) pero que no trae el soporte para PNG y que da el error 
      
	  "scamp: symbol lookup error: scamp: undefined symbol: c_plimage"
     
     Por tanto, MUY IMPORTANTE hacer en enlace o copia (como se prefiera) 
     
      >>>> ln -s /usr/local/plplot599/lib/libplplotd.so.11.0.0 /usr/lib64/libplplotd.so.9
     
     y listo !!! SCAMP debe generar los graficos PNG sin problema (glup!).
     
     
     FAQ:
       My program exits with the error message Unable to either (1) open/find or (2) allocate memory for the font file

       The PLplot library can't find the font files plstnd5.fnt and plxtnd5.fnt. Set the environment variable PLPLOT_LIB to the directory where these files are, e.g. export PLPLOT_LIB=/usr/local/plplot/data. 
     
     
    HA costado lo suyo !!! lo ideal sería que SCAMP (E.Bertin) migrara a la libraría cairo para generar los PNGs !!!
    
    Sin embargo, si le digo a SCAMP que genere ficheros JPEG no lo hace (Requested device jpeg not available), pregunta cada vez por el tipo de fichero....por qué ?
    PDF's si lo genera bien, incluso con mejor calidad que los PNG !!
    PS: en B/N y no completos
    Recompilo PLPLOT library con PLD_jpeg ON y ya si genera SCAMP los JPEG's, pero de una calidad pésima, inservibles !!!


2.3 SWARP v2.19.1 : 
------------------
- Download from astromatic.net --> http://www.astromatic.net/download/swarp/swarp-2.19.1-1.x86_64.rpm

> rpm -ivl swarp-2.19.1-1.x86_64.rpm

B) Sources packages
+++++++++++++++++++

B.1) Add science repository in order to install atlas/blas/lapack/fftw (etc):

Add the file /etc/zypp/repos.d/science.repo with the next content:

[science]
name=Software for Scientists and Engineers (openSUSE_12.2)
type=rpm-md
baseurl=http://download.opensuse.org/repositories/science/openSUSE_12.2/x86_64/
gpgcheck=1
gpgkey=http://download.opensuse.org/repositories/science/openSUSE_12.2/repodata/repomd.xml.key
enabled=1


B.2) Install atlas/blas/lapack/fftw development libraries :

zypper install libatlas3-devel lapack-devel blas-devel

B.3) Sextractor: 
- Download the source tar ball
- run configure, make & make install

B.4) SCAMP: 
- Download the source tar ball
- run configure, make & make install

At the linking stage, I got the next error (suse11.4):

libtool: Version mismatch error.  This is libtool 2.4, but the
libtool: definition of this LT_INIT comes from libtool 2.2.6b.
libtool: You should recreate aclocal.m4 with macros from libtool 2.4
libtool: and run autoconf again.

??????

B.5) SWARP: 
- Download the source tar ball
- run configure, make & make install



3. Numpy v1.6.2 (default in openSUSE-12.2)
===============
* With zypper:

> zypper install python-numpy python-numpy-devel

* From source:

- pre-requisite: gfortran 
>  zypper install gcc-fortran

- download Numpy v1.6.2 from http://new.scipy.org/download.html --> sourceforge
 
> python setup.py build --fcompiler=gnu95 install

NOTE: the binaryx86_64 rpm's files can not be installed, a lot of failed
dependences (python 2.7 , etc....) 

4.Scipy v0.10.1 (default in openSUSE-12.2) 
===============
> zypper install python-scipy

- Currently only used in applyDistort.py and third party software 'cosmics', 
but  not required for PAPI.
- pre-requisites : blas3 lapack3+

BLAS/Lapack
~~~~~~~~~~~

 > zypper install blas libblas3
 > zypper install lapack liblapack3

- download scipy-0.10.1.tar.gz

 > unpack .tar.gz
 > python setup.py install


5. Matplotlib v.1.1.0
=====================
* With zypper:

openSuSE12.2 --> zypper install python-matplotlib python-matplotlib-tk

* From source
- download from homepage : matplotlib.sourceforge

> unpack
> python setup.py install (as root)


7. PyQt4 (default in openSUSE12.2)
========

zypper install python-qt4 
zypper install python-qt4-devel (optional, pero necesario para pyuic4)
(The following NEW packages are going to be installed:
  python-qt4-devel python-qt4-utils python-sip-bin python-sip-devel)
  

6. PyQt3 (any more required, now using PyQt4)
========
* Homepage : http://www.riverbankcomputing.co.uk/software/pyqt/download3
* Dependences:

 - qt3-devel
 - SIP : sip-4.13.tar.gz 
 - PyQt : PyQt-x11-gpl-3.18.1.tar.gz

* qt3-devel

> zypper install qt3-devel
> zypper install qt3-devel-tools (ONLY for development:User Interface Builder and other tools (designer, assistant, linguist)


* SIP : 

> tar -xvzf sip-4.13.tar.gz
> python configure.py
> make
> make install

* PyQt

>export QTDIR=/usr/lib64/qt3
>tar -xvzf PyQt-x11-gpl-3.18.1.tar.gz
>python configure.py
>make
>make install

7. PySqlite2 (python<2.5)
=========================
If you're using Python 2.5 and up, you already have a working version of pysqlite 2, bundled as sqlite3. You can stop here ;-)

If you are using an older version of Python or you'd like to benefit from the latest and greatest version of pysqlite, grab Windows installer or the source .tar.gz from the official ​Downloads.
*-++++++++++++++
If you need to build from this .tar.gz, simply do after unpacking:

python setup.py build_static install 

This will fetch the latest SQLite version and bundle it within the extension.


Home: http://trac.edgewall.org/wiki/PySqlite
- Requirements: sqlite3, sqlite-devel
> zypper install sqlite3 sqlite3-devel

> download PySqlite v.2.6.3
>unpack tar.gz
>python setup.py build_static install 

8. DS9 + XPA
============
ds9
---
wget http://hea-www.harvard.edu/saord/download/ds9/linux64/ds9.linux64.7.1.tar.gz
tar xfz ds9.linux64.7.1.tar.gz
sudo cp ds9 /usr/local/bin

xpa library
-----------
wget ftp://sao-ftp.harvard.edu/pub/rd/xpa/xpa-2.1.14.tar.gz

> tar -xvzf
> ./configure
> make install


9. WCSTools (v3.8.7) (not sure if required, optional ?)
====================
- download from http://tdc-www.harvard.edu/wcstools/
> wget http://tdc-www.harvard.edu/software/wcstools/wcstools-3.8.7.tar.gz
> unpack
> make all
> mkdir -p /usr/local/wcstools/bin
> cp bin/* /usr/local/wcstools/bin

10. PyWCS (v.1.10-4.7) (included in stsci_python >=2.13)
=====================
But, also from source:

- download from https://trac.assembla.com/astrolib
- PyFITS is required, but PyWCS can be installed without it
> unpack source tar.gz
> python setup.py install


11. VO.table + ATpy (en el futuro serán parate de astropy)
===================
- vo.table v.0.7.2 from http://stsdas.stsci.edu/astrolib/vo-0.8.tar.gz

- atpy v.0.9.6.0 from http://atpy.github.com/
wget https://github.com/downloads/atpy/atpy/ATpy-0.9.6.tar.gz

vo.table (lo necesita ATpy)
--------
> unpack .tar.gz
> python setup.py install

ATpy 
----
> unpack .tar.gz
> python setup.py install


12. STSCI_PYTHON
================


1) Install Pmw v.2.0.0 
-----------------------
From: http://sourceforge.net/projects/pmw/files/Pmw/Pmw.2.0.0/

> unpack 
> python setup.py install

2) IRAF v2.16 x86_64
--------------------

wget ftp://iraf.noao.edu/iraf/v216/PCIX/iraf.lnux.x86_64.tar.gz

To install this release, you should download the binary distribution
file appropriate for your machine (either linux or osx) and then identify
yourself as one of the following users and follow the steps described:

    - I am installing for the First Time:

        1)  Create an 'iraf' directory (preferrably /iraf/iraf) and unpack
            the distro file there
        2)  Define $iraf in your environment
        3)  Run the $iraf/unix/hlib/install script to install the system

x11iraf (xgterm)
----------------
mkdir x11iraf
cd x11iraf
wget http://iraf.net/ftp/iraf/x11iraf/x11iraf-v1.5DEV-bin.redhat.tar.gz 
tar xfz x11iraf-v1.5DEV-bin.redhat.tar.gz
ln -s bin.redhat bin.suse
ln -s lib.redhat lib.suse
mkdir /usr/lib64/X11/app-defaults
sudo ./install

* Dependences

 > sudo zypper install libXmu6-32bit
 

2.1) STSDAS & TABLES (v.3.15)
--------------------------
Download birany from : http://www.stsci.edu/resources/software_hardware/stsdas/download

> cp stsci_iraf-3.15.linux.tar.gz /iraf/extern
> cd /iraf/extern
> tar zxf stsci_iraf-3.15.linux.tar.gz
> cd stsci_iraf-3.15
> ./install_helper
 
This script will show you the name of your iraf extern.pkg file and several
lines of configuration. Copy/paste ALL of these lines into extern.pkg, even
if you do not need all of them.

-----
OJO !!! ---> la funcion envget("helpdb") parece que no funciona bien y da problemas 
al lanzar pyraf (unos problemas un tanto raros "canno't import gki" ....etc)

Quitando del extern.pkg los IF's y pondiendo la ruta del helpdb a "mano" no da problemas.
-----
 
If you do not have write access to hlib$extern.pkg, you can place these lines
in your login.cl

If your extern.pkg file already contains definitions for STSDAS, TABLES, or
STECF, remove them. 

2.2) mscred 5.04 (src + bin packages)
----------------

- This external IRAF package is not required by stsci_python, but PAPI for MEF processing
- Download source and binary package from :

> wget ftp://iraf.noao.edu/iraf/extern/mscred-bin.linux64.tar.gz

- Follow the installation instructions from README file (basically, as usual
extenal IRAF packages) -> OJO, ha cambiado, ver README del directorio extern/

OJO, desde IRAF v2.15 ya no es necesario incluirlos en hlib$extern.pkg, pues los
lee automáticamente del directorio $iraf/iraf/extern:

"""
Dynamic package loading is a new feature in v2.15 that allows for
package directories created in the iraf$extern directory to be automatically
defined when the CL is started.  The means that external package installation
no longer *requires* that the hlib$extern.pkg file be edited to define the
package, although that remains an option for packages which somehow cannot
conform to this new scheme.
""" 

- Set appropiate links:

> ln -s bin.redhat bin.linux
> ln -s bin.redhat bin.linux64
> ln -s bin.redhat bin 



2.3) nmisc v05-06-2003 (mm/dd/yyyy)
-----------------------------------
- Include starfocus & psfmeasure tasks
- Download src and birary packages:

> wget ftp://iraf.noao.edu/iraf/extern-v214/nmisc.tar.Z
> wget ftp://iraf.noao.edu/iraf/extern-v214/nmisc-bin.redhat.tgz

- Follow installation instruction of README file

> mkdir /iraf/extern/nmisc
> cd /iraf/extern/nmisc
> tar -xvzf nmisc.tar.Z
> tar -xvzf nmisc-bin.redhat.tgz

- Set appropiate links:

> ln -s bin.redhat bin.linux64
> ln -s bin.redhat bin 

- Edit the $hlib/extern.pkg file and add the next lines:

reset nmisc = /iraf/extern/nmisc
task nmisc = nmisc$nmisc.cl


Fix the bug in mscimarith:

"""
IRAF: --> mscred.mscarith

"""
Hello,

There's a typo in mscred.mscarith.cl which prevents msarith from
running in pyraf.

line# 25 in mscarith.cl should be changed from

int nop1, nop2, nresults, next1, next2, nexts, n

to

int nop1, nop2, nresult, next1, next2, nexts, n

The error in pyraf is:

apply(self._clFunction, parList, kw)
File "<CL script mscred.mscarith>", line 90, in mcsarith
taskObj.nresult = iraf.sections.nimages
File "/usr/stsci/pyssgdev/2.4.2/pyraf/iraftask.py", line 1135, in __setattr__
raise AttributeError(str(e))
AttributeError: Unknown parameter requested: nresult


Nadia Dencheva
"""


In addition, is required to set next variable as follow to avoid problems
with mscred package when calling with file templates:
(16-Julio-2013)


modificación en  /iraf/iraf/unix/hlib/zzsetenv.def:

set     use_new_imt     = no



3) stsci_python 2.13
--------------------
-Download source package from
http://www.stsci.edu/resources/software_hardware/stsci_python/current/download

and follow the installation instructions from
http://www.stsci.edu/resources/software_hardware/stsci_python/Installation/#installing-from-source


> zypper install ipython
> zypper install python-numpy-devel

> unpack .tar.gz
> python setup.py install


13. Aladin software tool (v7.5)
===============================
Not mandatory, but it might be useful for the observer during the observation 
or data inspection/analysis.
Aladin is an interactive software sky atlas allowing the user to visualize 
digitized astronomical images, superimpose entries from astronomical catalogues
 or databases, and interactively access related data and information from the 
Simbad database, the VizieR service and other archives for all known sources 
in the field.

http://aladin.u-strasbg.fr/aladin.gml

>download Aladin.tar
>tar -xvf Aladin.tar
>cp -av Aladin /usr/local/


14. MIDAS 10SEPpl1.1 (for CL environment)
=========================================
See: http://www.eso.org/sci/software/esomidas/

Note: Some patches must be done to the MIDAS 10SEPpl1.1 concerning a
BUG in the catalog routines (see gmail from Klaus Banse at ESO for more details)
Files to patch:
      - midfct.c
      - midcat.c
      - scc.c



15. OTHER SOFTWARE REQUIRED
===========================

- STILTS (http://www.star.bris.ac.uk/~mbt/stilts/) : used by photometry.py for catalog xmatching

  > wget http://www.star.bris.ac.uk/~mbt/stilts/stilts.jar
  > wget http://www.star.bris.ac.uk/~mbt/stilts/stilts

and copy to the directory specified by the _stilts_pathname variable in photometry.py (/home/panic/SOFTWARE/STILTS/stilts)

TO BE CONFIRMED/ENHANCED ! (any more required for the moment !)




16. OTHER SYSTEM LIBS REQUIRED (openSUSE11.4)
============================== 

- libcurl4-32bit (and maybe this link : usr/lib/libcurl.so.3 ->
- libcurl.so.4.1.0, required by IRAF::imcombine)
- libgfortran
- libreadline3


17. PAPI SOURCES
================

#> svn co svn+ssh://integrador@arch.osn.iaa.es/home/integrador/Repository/PANIC/PAPI/trunk/ papi
> svn co svn://arch.osn.iaa.es/PANIC/PAPI/trunk papi

> cd papi/irdr
> cd make all

- edit .bashrc and set environment variables (see environment configuration)


PAPI ENVIRONMENT CONFIGURATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- .bashrc

PYTHONPATH=/home/panic/DEVELOP/PIPELINE/PANIC/trunk
PAPI_HOME=/home/panic/DEVELOP/PIPELINE/PANIC/trunk
TERAPIX=/usr/bin
# IRDR_BIN it is only required for debuging and testint purposes
IRDR_BIN=/home/panic/DEVELOP/PIPELINE/PANIC/trunk/irdr/bin/


export PYTHONPATH PAPI_HOME TERAPIX

alias xg='/usr/local/bin/xgterm -title IRAF -cr red -ms blue -sb -sl 1000 -geometry 80x29 -bg grey -fg black -e cl'
alias panic='cd /home/panic/DEVELOP/PIPELINE/PANIC/trunk'
alias data='cd /data/'
# PANIC-MIDAS PROCEDURES


GEIRSLSTABORT="/home/panic/GEIRS/geirsLstAbort"
CA_FFLTEST=/home/panic/DEVELOP/PIPELINE/PANIC/trunk/simu/caha/ffltest
AUPLAY=/usr/bin/play
GEIRS_DIR=/home/panic/GEIRS
FLAT_COMMAND=/home/panic/DEVELOP/PIPELINE/PANIC/trunk/simu/caha/flats
TECS_SCRIPT=/home/panic/DEVELOP/PIPELINE/PANIC/trunk/simu/caha
PANIC_UTIL=/home/panic/DEVELOP/PIPELINE/PANIC/trunk/MIDAS
PANIC_SCI=/home/panic/DEVELOP/PIPELINE/PANIC/trunk/MIDAS
PATH=$PATH:$HOME/GEIRS/scripts
export GEIRSLSTABORT CA_FFLTEST AUPLAY GEIRS_DIR FLAT_COMMAND TECS_SCRIPT PANIC_UTIL PANIC_SCI


=======
APENDIX
=======

===================================
IRAF installation (opcion suse) - not well documented !!
===================================

Make directories:
~~~~~~~~~~~~~~~~
sudo mkdir /iraf
sudo chgrp root /iraf

[['root' is in my case. add instead what is your username. Normally It should work with 'root'.]]

sudo chown $USER /iraf 

[['USER' means whatever is your username.]]

mkdir /iraf/tar
mkdir /iraf/iraf
mkdir /iraf/irafbin
mkdir /iraf/irafbin/bin.suse
mkdir /iraf/irafbin/noao.bin.suse

cd /iraf/tar
# all sources (generic stuff)
wget http://iraf.noao.edu/iraf/ftp/iraf/v212/PCIX/as.pcix.gen.gz
# iraf binaries
wget http://iraf.noao.edu/iraf/ftp/iraf/v212/PCIX/ib.suse.x86.gz
# noao binaries
wget http://iraf.noao.edu/iraf/ftp/iraf/v212/PCIX/nb.suse.x86.gz

install:
~~~~~~~~
cd /iraf/iraf
tar xfzp /iraf/tar/as.pcix.gen.gz
cd /iraf/irafbin/bin.suse
tar xfzp /iraf/tar/ib.suse.x86.gz
cd /iraf/irafbin/noao.bin.suse
tar xfzp /iraf/tar/nb.suse.x86.gz

Now basic functionality is available. But you probably want more…

Download and install extra’s:
~~~~~~~~~~~~~~~~~~~~~~~~~~~
cd /iraf/tar

ecl (replaces cl):
~~~~~~~~~~~~~~~~~
This thing uses termcap. Use ‘sudo yast -i’ to install it.

wget http://iraf.noao.edu/iraf/ftp/pub/ecl_install_linux.csh
sudo ecl_install_linux.csh

x11iraf (xgterm):
~~~~~~~~~~~~~~~~
mkdir x11iraf
cd x11iraf
wget http://iraf.noao.edu/iraf/ftp/iraf/x11iraf/x11iraf-v1.3.1-bin.suse.tar.gz
tar xfz x11iraf-v1.3.1-bin.suse.tar.gz
sudo ./install

ds9:
~~~
wget http://hea-www.harvard.edu/saord/download/ds9/linux/ds9.linux.4.13.tar.gz
tar xfz ds9.linux.4.13.tar.gz
sudo cp ds9 /usr/local/bin

x11iraf (xgterm):
~~~~~~~~~~~~~~~~
mkdir x11iraf
cd x11iraf
wget http://iraf.noao.edu/iraf/ftp/iraf/x11iraf/x11iraf-v1.3.1-bin.suse.tar.gz
tar xfz x11iraf-v1.3.1-bin.suse.tar.gz
sudo ./install

Settings Usable for all users:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sudo tcsh
cd /iraf/iraf/unix/hlib
setenv iraf /iraf/iraf/
chmod 755 irafuser.csh
source ./irafuser.csh
./install
exit

Change the ownership to iraf:
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
sudo chown -R /iraf . # change dir owner
cd $hbin # go to HSI bin dir
sudo chown 0 alloc.e # fix alloc.e ownership
sudo chmod 4755 alloc.e # fix permissions





====================================================================================
IRAF installation (debian)- much better documented
====================================================================================
= IRAF Setup on Ubuntu/Debian =

This page describes how to setup IRAF on a 32-bit Ubuntu/Debian machine.
Installation of X11IRAF and DS9 are also included, plus installation of Tables
and STSDAS are shown as an example of adding external packages.

It will be easiest if you just copy-paste the instructions one by one.
Please be sure to read and implement the instructions in [[brackets]] as well.

For 64-bit installation, see -
http://geco.phys.columbia.edu/~rubab/iraf/iraf_step_by_step_installation_64bit

Please send questions or comments to:
khan@astronomy.ohio-state.edu

--------------------------------------------------------------------------------

sudo apt-get install tcsh

wget http://geco.phys.columbia.edu/~rubab/iraf/ldso_1.9.11-15_i386.deb

sudo dpkg -i ldso_1.9.11-15_i386.deb

wget http://geco.phys.columbia.edu/~rubab/iraf/libc5_5.4.46-15_i386.deb

sudo dpkg -i libc5_5.4.46-15_i386.deb

wget http://geco.phys.columbia.edu/~rubab/iraf/termcap-compat_1.2.3_i386.deb

sudo dpkg -i termcap-compat_1.2.3_i386.deb

[[Use System>Administration>Users and Groups to create an account with username 
"iraf", real name "IRAF Maintenance", home directory "/iraf/iraf/local", shell 
"/bin/tcsh", and a secure password. Be sure to grant admin privilege to this 
account. For sudo commands here on, use this password. An easy way to avoid 
confusion is to assign the same password to this account as to your other / 
sys-admin account.]]


>>useradd iraf -d /iraf/iraf/local -s /bin/tcsh


sudo chown -R iraf:iraf /iraf

su iraf

mkdir /iraf/irafbin

mkdir /iraf/irafbin/bin.linux

mkdir /iraf/irafbin/noao.bin.linux

mkdir /iraf/x11iraf

mkdir /iraf/extern

cd /iraf/iraf

wget http://iraf.noao.edu/iraf/ftp/iraf/v214/PCIX/as.pcix.gen.gz

tar -zxf as.pcix.gen.gz

rm as.pcix.gen.gz

cd /iraf/iraf/unix/bin.redhat/

mv * ../bin.linux/

cd /iraf/irafbin/bin.linux

wget http://iraf.noao.edu/iraf/ftp/iraf/v214/PCIX/ib.rhux.x86.gz

tar -zxpf ib.rhux.x86.gz

rm ib.rhux.x86.gz

cd /iraf/irafbin/noao.bin.linux

wget http://iraf.noao.edu/iraf/ftp/iraf/v214/PCIX/nb.rhux.x86.gz

tar -zxpf nb.rhux.x86.gz

rm nb.rhux.x86.gz

cd /iraf/iraf/unix/hlib

source irafuser.csh

[[Choose default paths as will be shown in on-screen prompt parentheses.
Type "y" only where "yes" returns "huh?".]]

sudo ./install

sudo apt-get install libncurses5

cd /iraf/x11iraf/

wget http://iraf.noao.edu/iraf/ftp/iraf/x11iraf/x11iraf-v2.0BETA-bin.redhat.tar.gz
 
tar -zxf x11iraf-v2.0BETA-bin.redhat.tar.gz

mv lib.redhat lib.linux

mv bin.redhat bin.linux

sudo ./install

rm x11iraf-v2.0BETA-bin.redhat.tar.gz

http://hea-www.harvard.edu/saord/ds9/archive/linux/ds9.linux.6.2.tar.gz
 
tar -zxf ds9.linux.6.2.tar.gz

rm ds9.linux.6.2.tar.gz

sudo mv ds9 /usr/local/bin/

exit

cd

wget http://geco.phys.columbia.edu/~rubab/iraf/iraf

sudo chmod u=rwx iraf

mkdir ~/IRAF

cd ~/IRAF

mkiraf

[[Select "xgterm" as your IRAF shell when prompted.]]

-----------------------------------------------------------------------------------------------------------------------------------------------

The command ./iraf will now launch a complete IRAF session containing DS9,
xgterm and ecl, based in ~/IRAF. Alternately, start "xgterm' (typing xgterm), 
cd into the directory where you did "mkiraf", and type "ecl" for enhanced IRAF, 
"cl" for regular IRAF, and "ds9" for standalone DS9 launch. 

Repeat the last 5 steps for each user as needed.

The following steps show how to add external packages. This example install 
Tables and STSDAS. If you don't need extra packages, then you are done already.

-----------------------------------------------------------------------------------------------------------------------------------------------

su iraf

cd /iraf/extern/

mkdir tables stsdas

cd /iraf/extern/tables/

wget http://stsdas.stsci.edu/download/tables_3.12/tables3.12.tar.gz

tar -zxf tables3.12.tar.gz

rm tables3.12.tar.gz

cd bin.linux/

wget http://stsdas.stsci.edu/download/tables_3.12/tables3.12.bin.redhat.tar.gz

tar -zxf tables3.12.bin.redhat.tar.gz

rm tables3.12.bin.redhat.tar.gz

cd /iraf/extern/stsdas

wget http://stsdas.stsci.edu/download/stsdas_3.12/stsdas3.12.tar.gz

tar -zxf stsdas3.12.tar.gz

rm stsdas3.12.tar.gz

cd bin.linux

wget http://stsdas.stsci.edu/download/stsdas_3.12/stsdas3.12.bin.redhat.tar.gz

tar -zxf stsdas3.12.bin.redhat.tar.gz

rm stsdas3.12.bin.redhat.tar.gz

cd /iraf/extern/stsdas

python python/compileall.py ./python

python python/compileall.py ./python/*

nano /iraf/iraf/unix/hlib/extern.pkg

[[Now, edit this file so that it look like what follows. Do not delete any 
existing lines, just add the new lines that has "stsdas" or "tables" or 
"apropos" in them.]]

-----------------------------------------

reset noao = iraf$noao/

task noao.pkg = noao$noao.cl

reset tables = /iraf/extern/tables/
task tables.pkg = tables$tables.cl

reset stsdas = /iraf/extern/stsdas/
task stsdas.pkg = stsdas$stsdas.cl
task apropos = stsdas$apropos.cl

reset helpdb = "lib$helpdb.mip \
,noao$lib/helpdb.mip \
,tables$lib/helpdb.mip \
,stsdas$lib/helpdb.mip \
"

keep

-----------------------------------------

[[Use ctrl-x to exit, answer "y" to save file, press enter to confirm.]

exit

cd

-----------------------------------------------------------------------------------------------------------------------------------------------

Now, tables and stsdas are available for use inside iraf. Some of the other
commonly used packages are ared, mscred, color, ctio, fitsutil, gemini, gmisc,
nmisc, rvsao and xdimsum. Google will help you find the packages and you can set
them up (similar to the example given here for stsdas/tables) following the 
instructions of the host pages.

The following are some notes on alternate way of doing things.

-----------------------------------------------------------------------------------------------------------------------------------------------


1. You can intall iraf without actually creating a separate user called "iraf". 
To do this, simply skip the [[ instructions ]] on how to create a new user, and 
*skip* these two lines -

sudo chown -R iraf:iraf /iraf
su iraf

Instead, precede *all* your commands with "sudo". 


2. Instead of installing the *.deb package of termcap-compat, you can install 
the rpm package. To do this, *skip* these lines -

wget http://geco.phys.columbia.edu/~rubab/iraf/ldso_1.9.11-15_i386.deb
sudo dpkg -i --force-architecture ldso_1.9.11-15_i386.deb
wget http://geco.phys.columbia.edu/~rubab/iraf/libc5_5.4.46-15_i386.deb
sudo dpkg -i --force-architecture libc5_5.4.46-15_i386.deb
wget http://geco.phys.columbia.edu/~rubab/iraf/termcap-compat_1.2.3_i386.deb
sudo dpkg -i --force-architecture termcap-compat_1.2.3_i386.deb

Instead, do these -


sudo apt-get install rpm
wget http://geco.phys.columbia.edu/~rubab/iraf/libtermcap-2.0.8-47.x86.rpm
sudo rpm -iv --force-debian --nodeps  libtermcap-2.0.8-47.x86.rpm
rm libtermcap-2.0.8-47.x86.rpm


3. Here are some other places to get packages from, or if you want to use x11iraf-1.5
wget http://iraf.net/ftp/iraf/v214/PCIX/as.pcix.gen.gz
wget http://iraf.net/ftp/iraf/v214/PCIX/ib.rhux.x86.gz
wget http://iraf.net/ftp/iraf/v214/PCIX/nb.rhux.x86.gz
wget http://iraf.net/ftp/iraf/x11iraf/x11iraf-v1.5DEV-bin.redhat.tar.gz


= END =

